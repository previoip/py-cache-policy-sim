15a16,20
> # ======= PATCH NOTE =======
> # ========= GLOBAL =========
> # override class config ref into
> # weakref form from parent class
> # ===== PATCH NOTE END =====
34,41c39,63
<         self.epochs = config['epochs']
<         self.lr = config['lr']
<         self.dropout = config['dropout']
< 
<         self.layers = config["mlp_hidden_size"] if config['mlp_hidden_size'] is not None else [600]
<         self.lat_dim = config['latent_dim']
<         self.anneal_cap = config['anneal_cap']
<         self.total_anneal_steps = config["total_anneal_steps"]
---
>         self.epochs = self.wref_config['epochs']
>         self.lr = self.wref_config['lr']
>         self.dropout = self.wref_config['dropout']
> 
>         self.layers = self.wref_config["mlp_hidden_size"] if self.wref_config['mlp_hidden_size'] is not None else [600]
>         self.lat_dim = self.wref_config['latent_dim']
>         self.anneal_cap = self.wref_config['anneal_cap']
>         self.total_anneal_steps = self.wref_config["total_anneal_steps"]
> 
>         self.user_num = self.wref_config['user_num']
>         self.item_num = self.wref_config['item_num']
> 
>         # ======= PATCH NOTE =======
>         # defer self.history_item_id retrieval from self.wref_config
>         # self.history_item_id = self.wref_config['history_item_id'].to(self.device)
>         self._get_history_item_id = lambda: self.wref_config['history_item_id'].to(self.device)
>         self.history_item_id = None
>         # ===== PATCH NOTE END =====
> 
>         # ======= PATCH NOTE =======
>         # defer self.history_item_value retrieval from self.wref_config
>         # self.history_item_value = self.wref_config['history_item_value'].to(self.device)
>         self._get_history_item_value = lambda: self.wref_config['history_item_value'].to(self.device)
>         self.history_item_value = None
>         # ===== PATCH NOTE END =====
43,47d64
<         self.user_num = config['user_num']
<         self.item_num = config['item_num']
< 
<         self.history_item_id = config['history_item_id'].to(self.device)
<         self.history_item_value = config['history_item_value'].to(self.device)
56,58c73,75
<         self.optimizer = config['optimizer'] if config['optimizer'] != 'default' else 'adam'
<         self.initializer = config['init_method'] if config['init_method'] != 'default' else 'xavier_normal'
<         self.early_stop = config['early_stop']
---
>         self.optimizer = self.wref_config['optimizer'] if self.wref_config['optimizer'] != 'default' else 'adam'
>         self.initializer = self.wref_config['init_method'] if self.wref_config['init_method'] != 'default' else 'xavier_normal'
>         self.early_stop = self.wref_config['early_stop']
61c78,88
<         self.topk = config['topk']
---
>         self.topk = self.wref_config['topk']
> 
> 
>     # ======= PATCH NOTE =======
>     # wraps item retrieval as method
>     def _retrieve_deferred(self):
>         if self.history_item_id is None:
>             self.history_item_id = self._get_history_item_id()
>         if self.history_item_value is None:
>             self.history_item_value = self._get_history_item_value()
>     # ===== PATCH NOTE END =====
92a120,125
> 
>         # ======= PATCH NOTE =======
>         # try retrieve deferred item before method call self.get_user_rating_matrix
>         self._retrieve_deferred()
>         # ===== PATCH NOTE END =====
> 
112a146,151
> 
>         # ======= PATCH NOTE =======
>         # try retrieve deferred item before method call self.get_user_rating_matrix
>         self._retrieve_deferred()
>         # ===== PATCH NOTE END =====
> 
121a161,166
> 
>         # ======= PATCH NOTE =======
>         # try retrieve deferred item before method call self.get_user_rating_matrix
>         self._retrieve_deferred()
>         # ===== PATCH NOTE END =====
> 
140a186,191
> 
>         # ======= PATCH NOTE =======
>         # try retrieve deferred item before method call self.get_user_rating_matrix
>         self._retrieve_deferred()
>         # ===== PATCH NOTE END =====
> 
